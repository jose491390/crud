/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vistas;

import inplimentacion.DAOProductoImpl;
import interfazDAO.DAOProducto;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import tablas.TablaProducto;

/**
 *
 * @author ISABELLA
 */
public final class ListaProducto extends javax.swing.JFrame {

    /**
     * Creates new form ListaProducto
     */
    public ListaProducto() {
        initComponents();
        cargarProducto();

    }

    //metodo para cargar los datos de la base de dabos
    public void cargarProducto() {
        try {
            DAOProducto dao = new DAOProductoImpl();
            DefaultTableModel tablaP = (DefaultTableModel) tablaProductos.getModel();
            List<TablaProducto> productos = dao.listar();

            // Verificar si hay productos en la lista antes de mostrarlos
            if (!productos.isEmpty()) {
                for (TablaProducto producto : productos) {
                    Object[] rowData = {
                        producto.getId(),
                        producto.getNombre(),
                        producto.getDescripcion(),
                        producto.getPrecioUnidadCompra(),
                        producto.getIva(),
                        producto.getPrecioUnidadVenta()
                    };
                    // Agregar la fila al modelo
                    tablaP.addRow(rowData);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No hay productos en la base de datos.",
                        "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            // Manejar la excepción adecuadamente
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg = new javax.swing.JPanel();
        txtBuscar = new javax.swing.JTextField();
        buscar = new javax.swing.JButton();
        eliminar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        contenedor = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaProductos = new javax.swing.JTable();
        actualizar = new javax.swing.JButton();
        editar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buscar.setText("BUSCAR");
        buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarActionPerformed(evt);
            }
        });

        eliminar.setText("ELIMINAR");
        eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("INVENTARIO");

        tablaProductos.setAutoCreateRowSorter(true);
        tablaProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOMBRE", "DESCRIPCION", "PRECIO UNIDAD COMPRA", "IVA", "PRECIO UNIDAD VENTA"
            }
        ));
        jScrollPane1.setViewportView(tablaProductos);

        javax.swing.GroupLayout contenedorLayout = new javax.swing.GroupLayout(contenedor);
        contenedor.setLayout(contenedorLayout);
        contenedorLayout.setHorizontalGroup(
            contenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 744, Short.MAX_VALUE)
        );
        contenedorLayout.setVerticalGroup(
            contenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenedorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE))
        );

        actualizar.setText("ACTUALIZAR");
        actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarActionPerformed(evt);
            }
        });

        editar.setText("EDITAR");
        editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bgLayout = new javax.swing.GroupLayout(bg);
        bg.setLayout(bgLayout);
        bgLayout.setHorizontalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contenedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bgLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(actualizar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eliminar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editar)
                .addGap(17, 17, 17))
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        bgLayout.setVerticalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscar)
                    .addComponent(eliminar)
                    .addComponent(actualizar)
                    .addComponent(editar))
                .addGap(15, 15, 15)
                .addComponent(contenedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarActionPerformed
        DAOProducto dao = new DAOProductoImpl();
        DefaultTableModel tablaP = (DefaultTableModel) tablaProductos.getModel();
        if (tablaProductos.getSelectedRow() > -1) {
            for (int i : tablaProductos.getSelectedRows()) {
                try {
                    dao.eliminar((int) tablaProductos.getValueAt(i, 0));
                    tablaP.removeRow(i);
                    String mensajeUsuario = "EL PRODUCTO FUE ELIMINADO CORRECTAMENTE ";
                    JOptionPane.showMessageDialog(this, mensajeUsuario,
                            "MENSAJE INFORMATION", JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {
                } finally {
                }
            }
        } else {
            String mensajeUsuario = "Debes seleccionar el producto a eliminar. ";
            JOptionPane.showMessageDialog(this, mensajeUsuario,
                    "MENSAJE INFORMATION", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_eliminarActionPerformed

    private void actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarActionPerformed
        DefaultTableModel tablaP = (DefaultTableModel) tablaProductos.getModel();

        // Limpia todas las filas existentes en la tabla
        tablaP.setRowCount(0);

        // Aquí deberías cargar los datos desde tu fuente de datos (base de datos, lista, etc.)
        List<TablaProducto> productos = obtenerDatosActualizados();

        // Añade las filas con los datos actualizados al modelo de la tabla
        for (TablaProducto producto : productos) {
            Object[] rowData = {producto.getId(), producto.getNombre(), producto.getDescripcion(),
                producto.getPrecioUnidadCompra(), producto.getIva(), producto.getPrecioUnidadVenta()};
            tablaP.addRow(rowData);
        }
    }

    // Método para obtener datos actualizados 
    private List<TablaProducto> obtenerDatosActualizados() {
        // Aquí obtene los datos desde la base de datos         
        DAOProducto dao = new DAOProductoImpl();
        try {
            return dao.listar();
        } catch (Exception ex) {
            ex.printStackTrace();
            return List.of(); // Devuelve una lista vacía en caso de error
        }

    }//GEN-LAST:event_actualizarActionPerformed

    private void editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarActionPerformed

        if (tablaProductos.getSelectedRow() > -1) {
            try {
                int userId = (int) tablaProductos.getValueAt(tablaProductos.getSelectedRow(), 0);
                DAOProducto dao = new DAOProductoImpl();
                TablaProducto producto = dao.getUserById(userId);

                // Crear una instancia de tu ventana de edición
                Editar ventanaEdicion = new Editar();

                // Configurar la interfaz de edición con los detalles del producto
                ventanaEdicion.cargarDatos(producto);

                // Mostrar la ventana de edición
                ventanaEdicion.setVisible(true);

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debes seleccionar el producto a editar.",
                    "MENSAJE INFORMATIVO", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_editarActionPerformed

    private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed
        try {
            String buscar = txtBuscar.getText();
            DAOProducto dao = new DAOProductoImpl();
            DefaultTableModel tablaP = (DefaultTableModel) tablaProductos.getModel();
            List<TablaProducto> productos = dao.buscar(buscar);

            // Verificar si hay productos en la lista antes de mostrarlos
            if (!productos.isEmpty()) {
                productos.forEach((u) -> tablaP.addRow(new Object[]{
                    u.getId(),
                    u.getNombre(),
                    u.getDescripcion(),
                    u.getPrecioUnidadCompra(),
                    u.getIva(),
                    u.getPrecioUnidadVenta()
                }));
            } else {
                // Indicar al usuario que no se encontraron resultados
                JOptionPane.showMessageDialog(this, "No se encontraron productos.", "Sin resultados", JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (Exception e) {
            // Manejar la excepción adecuadamente, por ejemplo, mostrando un mensaje de error
            JOptionPane.showMessageDialog(this, "Error al buscar productos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace(); // Esto es útil para depuración, pero considera quitarlo en un entorno de producción.
        }
    }//GEN-LAST:event_buscarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListaProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListaProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListaProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListaProducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListaProducto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actualizar;
    private javax.swing.JPanel bg;
    private javax.swing.JButton buscar;
    private javax.swing.JPanel contenedor;
    private javax.swing.JButton editar;
    private javax.swing.JButton eliminar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaProductos;
    private javax.swing.JTextField txtBuscar;
    // End of variables declaration//GEN-END:variables
}
